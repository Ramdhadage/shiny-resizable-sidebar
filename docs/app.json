[{"name":"app.R","content":"\r\nlibrary(shiny)\r\nlibrary(bslib)\r\n\r\ncss <- \"/* Minimal styling for the resizable sidebar layout */\r\n.bslib-sidebar-layout { position: relative; --_sidebar-width: 250px; }\r\n.bslib-sidebar-layout .bslib-sidebar { width: var(--_sidebar-width) !important; min-width: 150px; }\r\n#drag-handle {\r\n  position: absolute;\r\n  left: calc(var(--_sidebar-width));\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 10px;\r\n  margin-left: -5px;\r\n  background: linear-gradient(90deg, rgba(0,0,0,0.03), rgba(0,0,0,0.06));\r\n  cursor: col-resize;\r\n  z-index: 999;\r\n}\r\n#drag-handle:focus { outline: 2px solid #2680C2; }\r\nbody.dragging { cursor: col-resize; user-select: none; }\r\n@media (max-width: 600px) {\r\n  .bslib-sidebar-layout .bslib-sidebar { position: relative; width: 100% !important; }\r\n  #drag-handle { display: none; }\r\n}\r\n\"\r\n\r\njs <- \"(function(){\r\n  Shiny.addCustomMessageHandler('setSidebarWidth', function(width){\r\n    if (typeof width !== 'number' && typeof width !== 'string') { console.warn('setSidebarWidth: invalid payload', width); return; }\r\n    var w = Number(width);\r\n    if (isNaN(w)) { console.warn('setSidebarWidth: payload not a number', width); return; }\r\n    var el = document.querySelector('.bslib-sidebar-layout');\r\n    if (!el) { console.warn('setSidebarWidth: target .bslib-sidebar-layout not found'); return; }\r\n    w = Math.max(150, Math.min(500, Math.round(w)));\r\n    el.style.setProperty('--_sidebar-width', w + 'px');\r\n  });\r\n\r\n  document.addEventListener('DOMContentLoaded', function(){\r\n    var layout = document.querySelector('.bslib-sidebar-layout');\r\n    if (!layout) return;\r\n    // ensure default CSS var\r\n    layout.style.setProperty('--_sidebar-width', layout.style.getPropertyValue('--_sidebar-width') || '250px');\r\n\r\n    var handle = document.getElementById('drag-handle');\r\n    if (!handle) return;\r\n    var dragging = false;\r\n\r\n    handle.addEventListener('mousedown', function(e){ dragging = true; document.body.classList.add('dragging'); e.preventDefault(); });\r\n    document.addEventListener('mousemove', function(e){\r\n      if (!dragging) return;\r\n      var rect = layout.getBoundingClientRect();\r\n      var newW = Math.round(e.clientX - rect.left);\r\n      newW = Math.max(150, Math.min(500, newW));\r\n      layout.style.setProperty('--_sidebar-width', newW + 'px');\r\n      Shiny.setInputValue('sidebar_width_from_js', newW, {priority: 'event'});\r\n    });\r\n    document.addEventListener('mouseup', function(e){ if (dragging) { dragging = false; document.body.classList.remove('dragging'); } });\r\n\r\n    // touch support\r\n    handle.addEventListener('touchstart', function(e){ dragging = true; });\r\n    document.addEventListener('touchmove', function(e){ if (!dragging) return; var t = e.touches[0]; var rect = layout.getBoundingClientRect(); var newW = Math.round(t.clientX - rect.left); newW = Math.max(150, Math.min(500, newW)); layout.style.setProperty('--_sidebar-width', newW + 'px'); Shiny.setInputValue('sidebar_width_from_js', newW, {priority: 'event'}); e.preventDefault(); }, {passive:false});\r\n    document.addEventListener('touchend', function(e){ dragging = false; });\r\n\r\n    // keyboard resize on handle\r\n    handle.addEventListener('keydown', function(e){\r\n      var cur = parseInt(getComputedStyle(layout).getPropertyValue('--_sidebar-width')) || 250;\r\n      if (e.key === 'ArrowLeft') { cur = Math.max(150, cur - 10); layout.style.setProperty('--_sidebar-width', cur + 'px'); Shiny.setInputValue('sidebar_width_from_js', cur, {priority: 'event'}); e.preventDefault(); }\r\n      if (e.key === 'ArrowRight') { cur = Math.min(500, cur + 10); layout.style.setProperty('--_sidebar-width', cur + 'px'); Shiny.setInputValue('sidebar_width_from_js', cur, {priority: 'event'}); e.preventDefault(); }\r\n    });\r\n  });\r\n})();\"\r\n\r\nui <- bslib::page_sidebar(\r\n  title = \"Resizable Sidebar Prototype\",\r\n  theme = bslib::bs_theme(version = 5),\r\n  sidebar = tagList(\r\n    tags$h4(\"Controls\"),\r\n    sliderInput('sidebar_slider', 'Sidebar width (px)', min = 150, max = 500, value = 250),\r\n    checkboxInput('show_density', 'Show density line', value = FALSE),\r\n    verbatimTextOutput('sidebar_width_text')\r\n  ),\r\n  # main content (passed as children)\r\n  tags$div(\r\n    id = 'main-content',\r\n    tabsetPanel(id = 'main_tabs',\r\n     tabPanel('About',\r\n        value = 'about',\r\n        tags$div(\r\n          style = 'padding: 12px; max-width:720px;',\r\n          h3('About this prototype'),\r\n          p('This prototype demonstrates a resizable sidebar using a CSS variable and a custom Shiny message (setSidebarWidth).'),\r\n          p('Server sends: session$sendCustomMessage(\"setSidebarWidth\", value) on slider change.'),\r\n          tags$ul(\r\n            tags$li('Sidebar default width: 250px'),\r\n            tags$li('Slider range: 150–500 px'),\r\n            tags$li('Drag handle and keyboard (arrow keys) supported')\r\n          ),\r\n          p('See repository PRD and wireframes for design notes.')\r\n        )\r\n      ),\r\n      tabPanel('Example',\r\n        value = 'example',\r\n        tags$div(\r\n          style = 'padding: 12px;',\r\n          h3('Resizable Sidebar — Example'),\r\n          p('Move the slider to change the sidebar width and the histogram bins (mapped). You can also drag the handle.') ,\r\n          plotOutput('main_plot', height = '420px'),\r\n          textOutput('plot_info')\r\n        )\r\n      )\r\n    ),\r\n    # drag handle sits inside the layout and is absolutely positioned using CSS var\r\n    tags$div(id = 'drag-handle', tabindex = '0')\r\n  ),\r\n  tags$head(\r\n    tags$style(HTML(css))\r\n  ),\r\n  # JS must be added as a tag inside the UI so it's sent to the client\r\n  tags$script(HTML(js))\r\n)\r\n\r\nserver <- function(input, output, session){\r\n\r\n  # Clamp and forward slider changes to client as custom message\r\n  observeEvent(input$sidebar_slider, {\r\n    val <- as.numeric(input$sidebar_slider)\r\n    if (is.na(val)) return()\r\n    val <- min(500, max(150, round(val)))\r\n    session$sendCustomMessage('setSidebarWidth', val)\r\n  })\r\n\r\n  # When client sends back width (from drag), update the slider for parity\r\n  observeEvent(input$sidebar_width_from_js, {\r\n    val <- as.numeric(input$sidebar_width_from_js)\r\n    if (is.na(val)) return()\r\n    val <- min(500, max(150, round(val)))\r\n    # avoid feedback loop by only updating if different\r\n    if (!isTRUE(all.equal(val, input$sidebar_slider))) {\r\n      updateSliderInput(session, 'sidebar_slider', value = val)\r\n    }\r\n  })\r\n\r\n  output$sidebar_width_text <- renderText({\r\n    paste0('Current width: ', input$sidebar_slider, ' px')\r\n  })\r\n\r\n  output$main_plot <- renderPlot({\r\n    # map sidebar width 150-500 -> bins 5-60\r\n    width <- as.numeric(input$sidebar_slider)\r\n    bins <- round(((width - 150) / (500 - 150)) * 55 + 5)\r\n    data <- faithful$eruptions\r\n    hist(data, breaks = bins, col = '#5BC0EB', border = 'white', \r\n         main = paste0('Histogram (bins: ', bins, ')'), xlab = 'Value')\r\n    if (isTRUE(input$show_density)){\r\n      dens <- density(data)\r\n      lines(dens, col = '#FDE74C', lwd = 2)\r\n    }\r\n  })\r\n\r\n  output$plot_info <- renderText({\r\n    paste('Sidebar width (px):', input$sidebar_slider)\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
